memory model 的本阶段研究主要基于内存的一致性方面
						Time, Clocks, and the Ordering of Events in a Distributed System
1978这篇经典论文提出了逻辑时钟的概念，为分布式系统中的事件排序和一致性问题提供了基础理论。虽然不是直接关于内存模型，但它在理解分布式系统中的一致性方面具有重要意义。
“发生在之前”的概念定义了分布式多进程系统中事件的不变部分排序。描述了一种将部分排序扩展为某种程度上任意的全排序的算法，并展示了如何使用这种全排序来解决一个简单的同步问题。
这个想法对于理解任何多进程系统都是有用的。有助于人们独立于解决多处理问题的机制来理解多处理的基本问题
						How to Make a Multiprocessor Computer That Correctly Executes Multiprocess Programs
1979这篇论文提出了“序列一致性”模型，这是最早的内存一致性模型之一，为多处理器系统中并发程序的正确执行提供了基础
许多大型顺序计算机以不同于程序指定的顺序执行操作。如果生成的结果与按顺序执行程序步骤所产生的结果相同，则实现了正确的执行。对于多处理器计算机，每个处理器的正确执行并不能保证整个程序的正确执行。给出了保证计算机正确执行多进程程序的附加条件。
作者在一个多处理器的简单样例中阐述了如何保留顺序一致性的逻辑属性(对不同存储单元的请求可能会被乱序处理，但顺序一致性得到保留)
						Memory Access Buffering in Multiprocessors
1986这篇论文研究了多处理器系统中的内存访问缓冲问题，提出了影响深远的缓冲一致性模型
在多处理器体系结构中，由于每个处理器的成本很高，因此保持处理器的高效率非常重要。处理器的高利用率是由稳定的、不间断的指令和操作数保证的。必须使用内存访问的流水线和缓冲，以便以非常短的周期时间弥合较慢的共享内存和执行单元之间的差距
从存储器访问缓冲的角度对三种不同的多处理机系统进行了研究。这些结构代表了共享内存多处理器的系统结构。
1、共享全局内存系统：具有共享全局内存和私有本地内存的多处理器。所有处理器都可以访问共享内存。本地内存与特定的处理器相关联，不包含任何共享数据
2、分布式全局存储器：系统具有分布式全局存储器的多处理器，它由本地存储器的互连组成。本地内存包含全局和私有数据，并且是随机访问的(不存在数据的多个副本)
3、基于缓存的系统：具有共享全局内存和私有缓存的多处理器。共享内存包含代码和数据，缓存是关联访问的

如果任何执行的结果与所有处理器的操作按某种顺序执行的结果相同，并且每个处理器的操作按其程序指定的顺序出现在该序列中，则系统是顺序一致的。
如果LOAD指令返回的值始终是具有相同地址的最新STORE指令给出的值，则内存方案是一致的。

多处理器系统的强排序：(1)单个处理器对全局数据的访问是按顺序的(2)若处理器2观察到处理器1是对全局数据的操作时，在处理器1结束之前所有对全局数据的访问都必须对处理器2执行
弱排序：(1)满足强排序第一条(2)在所有先前的全局数据访问被执行之前，处理器中没有对同步变量的访问(3)在执行对同步变量的先前访问之前，处理器不会发出对全局数据的访问
在弱有序系统中，处理器可以发出共享内存请求，而不必等待先前的请求被执行。这将产生一个效率非常高的系统。在这种情况下，唯一麻烦的访问是对同步变量的访问。缓冲区控制器仍然必须记录它发出但未执行的所有缓存访问的状态，以便每次检测到对同步变量的访问时都可以执行这些访问。这样一个缓冲区的实现可能非常复杂。
						Foundations of the C++ Concurrency Memory Model
2008探讨了C++并发内存模型的基础知识，为理解现代编程语言中的内存模型提供了理论支持

提供了一个简单的编程模型。为了避免数据竞争，或者等同地，将数据竞争中涉及的变量和其他对象标识为原子。它们保证顺序一致的执行。
对于那些无法通过锁或顺序一致的原子操作来满足性能需求的少数用户，提供了低级的、显式排序的原子，以简单性换取跨平台性能。
(1)顺序一致的原子:无数据争用模型，要求所有非普通数据操作呈现顺序一致。
(2)Trylock和对数据竞争定义的影响:像Trylock这样的同步原语可以以非直观的方式使用，而以前需要更复杂的数据竞争定义和/或过于严格的隔离。给出一个简单的方法来解决这个问题。
(3)数据竞争的语义:不为具有数据竞争的程序提供任何语义。

作者认为，在标准化过程中，对顺序一致原子的独占支持是不可行的，主要有两个原因:
在某些现有处理器上实现它的成本足够高，因此认为有必要为性能关键代码提供“仅供专家使用”的替代方案。
现有代码通常以一种假设弱内存排序语义的方式编写，并依赖于程序员显式地提供所需的平台相关硬件指令来强制执行必要的排序。