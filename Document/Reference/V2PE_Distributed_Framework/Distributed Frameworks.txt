Distributed Frameworks
       --Sun Grid Engine
       SGE（Sun Grid Engine）是一种开源的集群管理软件，用于管理和调度计算集群中的任务。其主要目标是提供高性能计算环境，使用户能够有效地利用集群资源。具体工作为将用户投递的任务进行排队，然后将任务交给能够运行的计算节点执行。
       它最初由Sun Microsystems开发，后来由Oracle继续开发和支持，将其改名为OGE(Oracle Gride Engine），并取消开源成为收费项目。SGE社区为挽救SGE项目，分别成立了Son of Gride Engine和Open Gride Scheduler项目，继续开源和独立发展；
       目前，Open Gride Scheduler得到Oracle支持继续开源，但技术支持服务收费，Son of Gride Engine完全遵循GPL协定，开源且免费，但因未得到Oracle支持且缺乏原SGE核心工程师而被持疑。
       优势：
       1.可以在多种环境中运行：大型计算机集群、网络和云环境；
       2.可自动执行任务，并在计算机资源可用时自动分配任务；
       3.可与其他工具（如HTCondor）集成，提高计算能力；
       缺点：
       使用CA证书验证，复杂不易使用；
       定义主机列表方面操作也较为复杂；
       由Oracle收购后取消开源成为收费项目；
https://www.cnblogs.com/bio-mary/p/13225149.html
https://blog.51cto.com/frankie9/510519
https://cloud.tencent.com/developer/information/Condor%2CSun%20Grid%20Engine%2C%E8%BF%98%E6%98%AF%E5%85%B6%E4%BB%96%E4%BB%80%E4%B9%88%EF%BC%9F-salon
https://blog.51cto.com/ittony/1562771
       --MapReduce framework
       MapReduce是一种用于处理和生成大规模数据集的编程模型。2004年由谷歌提出，现已成为处理大规模数据（大于1TB)的标准方法之一.其主要思想是Map和Reduce，极大地方便了编程人员在不会分布式并行编程时将自己程序运行在分布式系统上。
       MapReduce计算模型构成：
       主要由三个阶段构成：Map、Shuffle、Reduce；
       Map是映射，负责数据的处理、分发，将原始数据转化为键值对；Reduce是合并，将具有相同key值的value进行处理后再输出新的键值对作为最终结果。为了让Reduce可以并行处理Map的结果，必须对Map的输出进行一定的排序与分割，然后再交给对应的Reduce，而这个将Map输出进一步整理并交给Reduce的过程就是Shuffle。
       其中，Shuffle是系统自动实现的，而Map和Reduce操作需要自己定义相应Mapper类和Reducer类，以完成所需要的化简、合并操作。
       优点：
       1.能够处理 PB 以上级别的数据；
       2.自动处理节点故障，具有很高的容错性；
       3.易于编程，MapReduce向用户提供了简单的编程接口，隐藏了分布式计算的复杂性，用户只需编写 map 和 reduce 函数；
       4.可以通过简单增加机器来扩展其计算能力，具有良好扩展性；
       缺点：
       1.适合批处理任务，不擅长实时计算；
       2.MapReduce自身设计特点决定了数据源必须是静态的，因此不擅长流式计算；
       3.不擅长DAG（有向无环图）计算，会造成大量磁盘IO，降低性能；
       4.MapReduce 的编程模型相对简单，但对于某些复杂的数据处理任务可能不够灵活；
       5.MapReduce 的调度开销较大，可能会影响性能；
https://blog.csdn.net/qq_45038038/article/details/135302553
https://blog.csdn.net/lubin2016/article/details/125223582
       对于MapReduce架构，主要实现有：
       1.Hadoop MapReduce：最著名的开源实现，由 Apache 软件基金会维护；
       2.Google MapReduce：最早由谷歌提出，并在内部使用；
       3.Amazon EMR（Elastic MapReduce）：Amazon 提供的基于云的 MapReduce 服务；
       4.Apache Spark：虽然主要是一个内存计算框架，但也实现了兼容 MapReduce 的编程模型，并提供了更高的性能；
       --Reverse Proxies
       反向代理是指以代理服务器来接收客户端的请求，然后将请求转发给内部网络上的服务器，将从服务器上得到的结果返回给客户端，此时代理服务器对外表现为一个反向代理服务器。
       对于客户端来说，反向代理相当于目标服务器，只需将反向代理当作目标服务器一样发送请求即可，客户端无需进行任何设置。反向代理是代理服务器，为服务器收发请求，使真实服务器对客户端不可见。
       优点：
       1.可对客户端隐藏服务器的ip地址，提供一定的安全保护；
       2.为后端多台服务器提供负载均衡；
       3.可以对静态内容及短时间内有大量访问请求的动态内容提供缓冲服务，提高访问速度；
       4.可作为应用层的防火墙，为网站提供基于web攻击行为的防护，更容易排查恶意软件等，提供安全保障；
       5.为后端服务器统一提供加密和SSL加速，提供HTTP访问认证；
       缺点：
       1.需要配置每个客户端的代理设置；
       2.增加网络延迟；
       3.某些应用程序可能需要进行特殊配置以适应反向代理的使用。
       反向代理应用：
       （1）squid
       很古老的反向代理软件，拥有传统代理、身份验证、流量管理等高级功能，它算是目前互联网应用得最多的反向缓存代理服务器。
       优点：
       1.完整的庞大的cache技术资料；
       2.很多的应用生产环境；
       缺点：
       1.配置复杂；
       2.主要工作于各大古老的cdn上；
      （2）Varnish
       高性能、开源的反向代理服务器和内存缓存服务器，主要应用在并发要求不是很大的小型系统和应用中。
       优点：
       1. 高性能；
       2. 多核支持；
       3. 支持0-60秒的精确缓存时间。
       缺点：
       1. 不具备自动容错和恢复功能，重启后数据丢失；
       2. 在线扩容比较难。
       3. 32位机器上缓存文件大小为最大2GB；
       4. 不支持集群。
       （3）nginx
       高性能的HTTP和反向代理服务器，广泛应用于Web服务、负载均衡、缓存等场景。
       优点：
       1.对网络稳定性依赖非常小，安装与配置非常简单；
       2.可承担高负载且稳定；
       3.可通过端口检测服务器内部故障；
       4.社区活跃，第三方模块非常多；
       缺点：
       1.应用范围较小，仅能支持http、https、Email协议；
       2、对后端服务器的健康检查，只支持通过端口检测，不支持url来检测；
https://cloud.tencent.com/developer/article/1996633
https://blog.csdn.net/yyh_linux_note/article/details/97112496
https://blog.csdn.net/weixin_43809223/article/details/100827275?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-100827275-blog-104900016.235^v43^pc_blog_bottom_relevance_base6&spm=1001.2101.3001.4242.1&utm_relevant_index=3
       --BOINC/SETI@Home/Folding@Home
       ①BOINC:Berkeley Open Infrastructure for Network Computing,即伯克利开放式网络计算平台。
       最早是为了支持SETI@Home项目而开发的，操作容易且安全，逐渐成了最为主流的分布式计算平台，开发目的是为了帮助研究人员更方便地获得分布在世界各地的志愿者的计算资源，由美国国家科学基金会支持，大约有30个科学项目使用BOINC，用于调查疾病，研究气候变化，发现脉冲星等。
       BOINC平台采用了传统的客户端-服务端构架，服务端部署于计算项目方的服务器，客户端部署于志愿者的计算机，两者之间通过标准的互联网协议进行通讯。
       BOINC 基于 GNU 的 LGPL 协议发布，服务端一般部署于 Linux 操作系统，客户端则支持所有主流的操作系统，如 Windows、Linux、Mac OS X、FreeBSD 等。
       所有分布式计算机项目中均需涉及到任务分发，结果回收和验证、积分授予等相关处理，BOINC作为一个通用的分布式计算平台，提供了一个考虑周全的软件应用框架，使基于BOINC平台的计算项目在开发时，仅需关注项目研究内容相关方面，且BOINC平台是一个软件框架，并不对计算项目提供服务器硬件及网络等资源，具体计算项目的服务器仍是项目方自行提供的。
       ②SETI@home，为BOINC平台上的主流计算项目，其前身为SETI@home Classic，该项目是一个通过互联网利用家用个人计算机处理天文数据的分布式计算项目，试图通过分析阿雷西博特射电望远镜采集的无线电信号，搜寻能够证实外星智能生物存在的证据。该项目原始目标是要证明分布式计算概念的可行性和实用性，已经被普遍认为是完全成功的，以及以科学方法分析、探索地球以外的智慧生命，目前未找到证明来自地外文明信号的证据。该项目最著名的发现，就是2014年的SHGb02+14a的射电源。SETI@home 官方宣布：从 2020 年 3 月 31 日起，将不再向参与者发放新的计算任务，该项目正式进入休眠期。
       对于该项目休眠的原因，官方公布的是：项目已经达到收益递减点，目前已经得到了足够的分析数据，且管理数据的分布式处理需要耗费一些精力，现在官方需要集中精力完成已有结果的后端分析，并早日将结果写进科研论文中。但对该项目，民间一直存在争议，有人认为这个项目从未有过实质性的成果，浪费了大量计算资源。
       ③Folding@home项目目前是世界上最大的分布式计算项目，于2007年为吉尼斯世界记录所承认，截止目前有超过百万人参与项目并提交成果，它的计算能力总和也能达到全球超级计算机TOP10水平。同时该项目也是AMD和NVIDIA等GPU厂商最早参与推进的分布式计算项目，这让项目进程大大加快，用户参与更加方便。Folding@home专注于精确地模拟蛋白质折叠和错误折叠的过程，以便能更好地了解多种疾病的起因和发展，包括部分癌症、阿兹海默症（老年失智症）、牛海绵状脑病（疯牛病）、囊胞性纤维症，并将所有计算成果和论文公开发表。到目前为止，Folding@home已成功模拟5—10微秒的折叠过程，超出先前估计可模拟的时段数千倍。
       AMD、NVIDIA在该项目上争斗了很久，其中AMD是率先加入支持的，在专业玩家心目中提高了自己的地位，不过NVIDIA后来大力发展CUDA技术进行优化，FAH成绩得以飞速提升。AMD、NVIDIA的加入使得该项目迅速成为分布式计算的热门，TechPowerup、HardOCP、EVGA等机构、媒体、厂商都是该项目的重要参与者，中国团队也曾经取得过PPD(每日项目得分)第五名的成绩。
       Folding@home项目引发了少数公众质疑，实际上，该项目处于一个较为狭窄的领域，参与者以零散的方式提交片段计算结果，使用的计算引擎是行业内公认的分子动力学Gromacs，编译接口是OpenMM（GPU客户端）。虽说是第一大分布式计算项目，但凝聚的计算机并不够马上推动疾病攻克，或者快速研究出应对药物。Folding@home项目每个计算包都有详细解读，包括应对的问题和数学建模原理，其计算结果，在官网上有论文体现，在其他网站上有结果下载。随着更多志愿者的计算机加入，此项目计算速度就越快，距离科学家找到最终答案也越来越近。
       对于SETI@home与Folding@home：
       1.SETI@home，并入到伯克莱大学的并行运算体系，是BOINC中最具人气的子项目之一；Folding@home，是斯坦福大学主导并坚持了多年的并行运行项目；
       2.SETI借助BOINC Manager管理器，普通用户可以很方便的加入运算队伍，界面友好；FAH不像BM需要管理不同的项目，重点在内核技术核心的开发上。若只计划只用一个GPU或单核CPU计算，加入运算队伍的操作比SETI简单，否则问题较为复杂，上手不如SETI/BM自然顺畅，重视操控和效率；
       3.SETI的成绩统计、正在计算的项目、进度、完成度等很方便在BM界面查看管理，统一帐号下的计算机可以在BM打开官网页面清楚地列出计算机的主要配置和性能等很多资讯；FAH需要单独配置一个FAHMON软件来显示运算的初略信息和得分预览，官网只有很简单的总分、日平均分等信息，没有参与计算的电脑清单及资料等功能，实际使用后FAHMON更有效，只需每台运算的计算机在网络上共享FAH计算的目录，则位于整个局域的机器可以用一台机器来查看和监控运算情况。
       4. SETI的WorkUnit（WU）分为AstroPulse（AP）和Multibeam（MB）两种，CPU可以计算两种WU，其中AP包现在很少见了，GPU目前只能算MB包，或者协助CPU加速AP包，根据预估的计算量和计算时间评分；FAH根据项目、参与设备将WU按照分值不同来区别，单核、多核、Ati、Nvdia都有分别对应分值的WU；
       5. SETI和FAH的排名都是累计总得分来计算，第二排序依赖是平均分，SETI依赖的是总平均分RAC，FAH则是以日平均分PPD排名。
https://blog.csdn.net/BerryNard/article/details/113807895
https://boinc.berkeley.edu/
https://www.equn.com/wiki/SETI@home
https://www.equn.com/forum/thread-38899-1-1.html
https://www.equn.com/forum/thread-39175-1-1.html
https://cloud.tencent.com/developer/article/1610687
https://equn.com/forum/thread-24018-1-1.html
       --Fluence network
       Fluence Network 是一个去中心化计算网络，由分布在全球的节点组成，这些节点共同提供计算和存储资源。旨在通过去中心化的计算和存储基础设施提供高效、安全和可扩展的应用程序开发和运行环境。Fluence 利用区块链技术和去中心化网络架构，为开发者和用户提供透明、可信且无需许可的计算资源。
       Fluence有两个核心组件实现的：Aqua 和 Marine。
       Aqua负责分发和执行跨服务器的脚本，它能确保在去中心化网络中执行的每个步骤都是可审计和可验证的。每次Aqua脚本执行时，参与节点都会对其进行签名。
       另一方面，Marine是允许节点内多模块执行，为执行的每个计算函数生成加密证明。这些证明随后由网络中的其他节点验证，并作为处理的证据上链。
       优点：
     （1）通过智能合约和去中心化协议，计算任务被分配到网络中的多个节点进行处理，保证任务的安全性和可靠性，且去中心化架构消除了单点故障的风险，也提高了系统的可靠性和可用性；
     （2）采用分布式存储，增强数据的冗余性和可用性；
     （3）支持在去中心化网络中执行智能合约，确保计算过程的透明和可验证性；且通过智能合约实现任务的自动分发和执行，无需人工干预；
     （4）通过代币（如 Fluence Token）激励网络参与者，促进网络的健康发展和资源共享；
     （5）利用加密技术确保数据在存储和传输过程中的安全性和隐私保护；
     （6）可以根据需求动态调整节点数量和资源分配，确保高效的资源利用和任务执行；
     （7）Fluence通过降低特定提供商的重要性，帮助降低了整体价格，提供了更为经济的计算资源；
       缺点：
     （1）去中心化网络在某些高性能计算任务中可能不如集中式系统高效；
     （2）由于节点分布在全球，数据传输可能受到网络延迟的影响；
     （3）开发和部署去中心化应用需要较高的技术门槛，存在一定复杂性；
https://fluence.network/
https://new.qq.com/rain/a/20240308A036QF00